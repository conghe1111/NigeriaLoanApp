import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "com.bytedance.android.aabResGuard"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: "AndResGuard"

android {
    namespace "com.chocolate.nigerialoanapp"
    compileSdk 34

    defaultConfig {
        applicationId "com.afrokash.easymoni.nigeria"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 10003
        versionName "1.0.3"
        flavorDimensions("default")
        // dex突破65535的限制
        multiDexEnabled true
//        buildConfigField "String", "CREDIT_CHANNEL", "\"google_play\""
        ndk {
            // 设置支持的SO库架构，第三方给的so库哪几种架构，就配置这几种架构
            abiFilters 'armeabi-v7a', 'arm64-v8a'//,'x86'
//            abiFilters 'armeabi' , 'armeabi','x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        vectorDrawables {
            useSupportLibrary = true
        }
    }
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("uploadCrashlyticsMappingFile")) {
                task.enabled = false
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }

    buildFeatures {
        compose = true
        buildConfig = true
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
        }
    }

    signingConfigs {
        release {
            storeFile file('../sign/oyocredit')
            storePassword 'oyo123456'
            keyAlias 'key0'
            keyPassword 'oyo123456'
            //添加V1V2签名
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }


    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            debuggable true
            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
//                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "IS_AAB_BUILD", "false"
        }

        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            //关闭调试模式
            debuggable false
            // 开启ZipAlign优化
            zipAlignEnabled true
            buildConfigField "boolean", "IS_AAB_BUILD", "false"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name

        if (names.contains("something")) {
            variant.ignore = true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude("META-INF/proguard/androidx-annotations.pro")
        exclude("**/kotlin/**")
    }

    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    productFlavors {
        apiTest {
            dimension "default"
            resValue "string", "app_name_1", "@string/app_name_test"
            buildConfigField "boolean", "USE_ONLINE_API", "false"
//            manifestPlaceholders = [CHANNEL_VALUE: "KudiCredit"]
        }
        apiOnline {
            dimension "default"
            resValue "string", "app_name_1", "@string/app_name"
            buildConfigField "boolean", "USE_ONLINE_API", "true"
//            manifestPlaceholders = [CHANNEL_VALUE: "KudiCredit"]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "Afrokash_" + variant.productFlavors[0].name + "_" + variant.versionName + "_" + releaseTime() + ".apk"
            outputFileName = outputFileName
        }
    }
}

static def releaseTime() {
//    return new SimpleDateFormat("MM_dd_hh_mm",Locale.CHINA).format(new Date());
    return new SimpleDateFormat("MM_dd", Locale.CHINA).format(new Date());
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3

    implementation libs.appcompat
    implementation libs.utilcodex
    implementation libs.constraintlayout
    implementation libs.material
    implementation libs.glide
    implementation libs.glide.compiler
    implementation libs.fastjson
    implementation libs.okgo

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.firebase.messaging
//    implementation libs.integrity
    implementation libs.gson
    implementation(libs.eventbus)
    implementation libs.android.pickerview
//    implementation libs.installreferrer {
//        exclude group: 'com.squareup.okio'
//        exclude group: 'com.squareup.okhttp'
//        exclude group: 'com.squareup.okhttp3'
//    }
    implementation("com.android.installreferrer:installreferrer:2.2") {
        exclude group: 'com.squareup.okio'
        exclude group: 'com.squareup.okhttp'
        exclude group: 'com.squareup.okhttp3'
    }
    implementation libs.refresh.layout
    implementation libs.refresh.footer
    implementation libs.refresh.header

//    implementation 'androidx.multidex:multidex:2.0.1'
    // OkHttp
    //文字左右对齐库
    implementation 'com.text:alginlib:1.0.1'
    //###################################################
// 正式环境请用 release 包
    implementation "com.easeid.opensdk:liveness-sdk-android:0.1.1"
    //debug包 请使用 SNAPSHOT版本
//    implementation "com.easeid.opensdk:liveness-sdk-android:0.0.10-SNAPSHOT"
    //###################################################
//    implementation group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.5.0'
}

aabResGuard {
//    mappingFile = file("mapping.txt").toPath() // Mapping file used for incremental obfuscation
    whiteList = [ // White list rules
                  "*.R.raw.*",
//                  "*.R.mipmap.ic_home_logo",
//                  "*.R.string.default_web_client_id",
//                  "*.R.string.firebase_database_url",
//                  "*.R.string.gcm_defaultSenderId",
//                  "*.R.string.google_api_key",
//                  "*.R.string.google_app_id",
//                  "*.R.string.google_crash_reporting_api_key",
//                  "*.R.string.google_storage_bucket",
//                  "*.R.string.project_id",
//                  "*.R.string.com.crashlytics.android.build_id",
//                  "*.R.drawable.icon"
    ]
    obfuscatedBundleFileName = "duplicated-app.aab" // Obfuscated file name, must end with '.aab'
    mergeDuplicatedRes = false // Whether to allow the merge of duplicate resources
    enableFilterFiles = true // Whether to allow filter files
    filterList = [ // file filter rules
//                   "armeabi-v7a",
//                   "*/arm64-v8a/*",
                   "META-INF/*"
    ]

    enableFilterStrings = false // switch of filter strings
    unusedStringPath = file("unused.txt").toPath() // strings will be filtered in this file
//    languageWhiteList = ["en", "zh"] // keep en,en-xx,zh,zh-xx etc. remove others.
}

